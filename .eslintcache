[{"E:\\diaries-app\\src\\index.tsx":"1","E:\\diaries-app\\src\\reportWebVitals.ts":"2","E:\\diaries-app\\src\\App.tsx":"3","E:\\diaries-app\\src\\services\\mirage\\server.ts":"4","E:\\diaries-app\\src\\services\\mirage\\routes\\user.ts":"5","E:\\diaries-app\\src\\services\\api.ts":"6","E:\\diaries-app\\src\\utils.ts":"7","E:\\diaries-app\\src\\components\\Auth\\index.tsx":"8","E:\\diaries-app\\src\\store\\index.ts":"9","E:\\diaries-app\\src\\reducer\\rootReducer.ts":"10","E:\\diaries-app\\src\\reducer\\authReducer\\index.ts":"11","E:\\diaries-app\\src\\reducer\\userReducer\\index.ts":"12","E:\\diaries-app\\src\\config\\router.tsx":"13","E:\\diaries-app\\src\\components\\Home\\index.tsx":"14","E:\\diaries-app\\src\\components\\Navbar\\index.tsx":"15","E:\\diaries-app\\src\\services\\mirage\\routes\\dairy.ts":"16","E:\\diaries-app\\src\\reducer\\dairyReducer\\index.ts":"17","E:\\diaries-app\\src\\components\\Dairies\\index.tsx":"18","E:\\diaries-app\\src\\components\\Diary\\index.tsx":"19","E:\\diaries-app\\src\\services\\mirage\\routes\\entry.ts":"20","E:\\diaries-app\\src\\components\\Loader\\index.tsx":"21","E:\\diaries-app\\src\\components\\DiaryContent\\index.tsx":"22","E:\\diaries-app\\src\\components\\MyDiaries\\index.tsx":"23","E:\\diaries-app\\src\\reducer\\entryReducer\\index.ts":"24","E:\\diaries-app\\src\\Interfaces\\diary.interface.ts":"25"},{"size":742,"mtime":1608478011714,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":374,"mtime":1609443519193,"results":"29","hashOfConfig":"27"},{"size":1518,"mtime":1609438475384,"results":"30","hashOfConfig":"27"},{"size":1375,"mtime":1609443656875,"results":"31","hashOfConfig":"27"},{"size":963,"mtime":1608979120634,"results":"32","hashOfConfig":"27"},{"size":576,"mtime":1608461033461,"results":"33","hashOfConfig":"27"},{"size":4433,"mtime":1609443265479,"results":"34","hashOfConfig":"27"},{"size":188,"mtime":1608479413848,"results":"35","hashOfConfig":"27"},{"size":354,"mtime":1609185605608,"results":"36","hashOfConfig":"27"},{"size":804,"mtime":1609443384118,"results":"37","hashOfConfig":"27"},{"size":473,"mtime":1609443508659,"results":"38","hashOfConfig":"27"},{"size":1360,"mtime":1609443571861,"results":"39","hashOfConfig":"27"},{"size":3124,"mtime":1609443564233,"results":"40","hashOfConfig":"27"},{"size":2021,"mtime":1609443372968,"results":"41","hashOfConfig":"27"},{"size":1642,"mtime":1609443636783,"results":"42","hashOfConfig":"27"},{"size":2761,"mtime":1609443608696,"results":"43","hashOfConfig":"27"},{"size":1547,"mtime":1609443275752,"results":"44","hashOfConfig":"27"},{"size":1342,"mtime":1609443286125,"results":"45","hashOfConfig":"27"},{"size":1468,"mtime":1609443651627,"results":"46","hashOfConfig":"27"},{"size":288,"mtime":1609095652244,"results":"47","hashOfConfig":"27"},{"size":11590,"mtime":1609443339131,"results":"48","hashOfConfig":"27"},{"size":1637,"mtime":1609443363344,"results":"49","hashOfConfig":"27"},{"size":2415,"mtime":1609443621186,"results":"50","hashOfConfig":"27"},{"size":187,"mtime":1608890139873,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"oj2mi0",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"54"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"54"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\diaries-app\\src\\index.tsx",[],["118","119"],"E:\\diaries-app\\src\\reportWebVitals.ts",[],"E:\\diaries-app\\src\\App.tsx",["120","121"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport $ from 'jquery';\n\nimport MainRouter from \"./config/router\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />  \n    </div>\n  );\n}\n\nexport default App;\n","E:\\diaries-app\\src\\services\\mirage\\server.ts",[],"E:\\diaries-app\\src\\services\\mirage\\routes\\user.ts",["122","123"],"import { Request, Response } from \"miragejs\";\r\nimport { handleError } from \"../server\";\r\nimport { User } from \"../../../Interfaces/user.interface\";\r\nimport { randomBytes } from \"crypto\";\r\n\r\nconst generateToken = () => randomBytes(8).toString(\"hex\");\r\nexport interface AuthResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n//        Login...\r\nconst login = (schema: any, req: Request): AuthResponse | Response => {\r\n  const { userName, password,email } = JSON.parse(req.requestBody);\r\n  const user = schema.users.findBy({ userName }); // Will bring User Obj if Exits !\r\n  if (!user) {\r\n    return handleError(user, \"No user with that username exists\");\r\n  }\r\n  if (password !== user.password) {\r\n    return handleError(null, \"Incorrect Password, Please Try Again.\");\r\n  }\r\n  const token = generateToken(); //Token Will Generate..\r\n\r\n  return {\r\n    user: user.attrs as User,\r\n    token,\r\n  };\r\n};\r\n\r\n//              Sign Up...\r\nconst signup = (schema: any, req: Request): any => {\r\n  const data = JSON.parse(req.requestBody);\r\n  const exUser = schema.users.findBy({ userName: data.userName });\r\n  if (exUser) {\r\n    return handleError(null, \"A user with that username already exists.\");\r\n  }\r\n  const user = schema.users.create(data);\r\n  const token = generateToken();\r\n  return {\r\n    user: user.attrs as User,\r\n    token,\r\n  };\r\n};\r\nexport default {\r\n  login,\r\n  signup,\r\n};\r\n","E:\\diaries-app\\src\\services\\api.ts",[],"E:\\diaries-app\\src\\utils.ts",[],"E:\\diaries-app\\src\\components\\Auth\\index.tsx",["124","125","126","127"],"import { useState, useEffect } from \"react\";\r\nimport \"./auth.css\";\r\nimport logo from \"../../assests/logo.png\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { saveToken } from \"../../reducer/authReducer\";\r\nimport { setUser } from \"../../reducer/userReducer\";\r\nimport http from \"../../services/api\";\r\nimport { User } from \"../../Interfaces/user.interface\";\r\nimport { AuthResponse } from \"../../services/mirage/routes/user\";\r\nimport Loader from \"../Loader\";\r\nimport { useHistory } from \"react-router\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport const Login = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [userName, setUserName] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [loader, setLoader] = useState(false);\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  interface userSide {\r\n    token: string;\r\n    user: {\r\n      diaryIds: null;\r\n      email: string;\r\n      id: string;\r\n      password: string;\r\n      userName: \"a\";\r\n    };\r\n  }\r\n\r\n  let obj = {\r\n    userName,\r\n    email,\r\n    password,\r\n    id: Math.floor(Math.random() * 100),\r\n  };\r\n  const login = () => {\r\n    if (userName === \"\" || password === \"\") {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        text: \"Please Fill All The Fields\",\r\n      });\r\n    }\r\n    setLoader(true);\r\n    const path = \"/auth/login\";\r\n    http.post<User | AuthResponse>(path, obj).then((res: userSide | any) => {\r\n      dispatch(\r\n        setUser({\r\n          user: res.user,\r\n        })\r\n      );\r\n      dispatch(\r\n        saveToken({\r\n          token: res.token,\r\n          isAuthenticated: true,\r\n        })\r\n      ); //Token\r\n    });\r\n    setLoader(false);\r\n\r\n    setUserName(\"\");\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  const signUp = () => {\r\n    if (userName === \"\" || email === \"\" || password === \"\") {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        text: \"Please Fill All The Fields\",\r\n      });\r\n    }\r\n    setLoader(true);\r\n    const path = \"/auth/signup\";\r\n    http.post<User | AuthResponse>(path, obj).then((res: userSide | any) => {\r\n      dispatch(\r\n        setUser({\r\n          user: res.user,\r\n        })\r\n      );\r\n      dispatch(\r\n        saveToken({\r\n          token: res.token,\r\n          isAuthenticated: true,\r\n        })\r\n      );\r\n    });\r\n  };\r\n  if (loader) {\r\n    return <Loader />;\r\n  }\r\n  return (\r\n    <div className=\"AuthWrapper\">\r\n      <div className=\"cardWrapper pt-5\">\r\n        <div className=\"authcard p-5\">\r\n          {isLogin ? <h2>Login</h2> : <h2>Sign Up</h2>}\r\n          <div className=\"py-2\">UserName</div>\r\n          <input\r\n            className=\"inputBox\"\r\n            type=\"name\"\r\n            value={userName}\r\n            onChange={(e) => setUserName(e.target.value)}\r\n            placeholder=\"UserName\"\r\n          />\r\n          <div className=\"py-2\">E-mail Address</div>\r\n          <input\r\n            className=\"inputBox\"\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email \"\r\n          />\r\n          <div className=\"py-2\">Password</div>\r\n          <input\r\n            className=\"inputBox\"\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          {isLogin ? (\r\n            <button className=\"mt-3 btnLogin btn btn-block\" onClick={login}>\r\n              Login\r\n            </button>\r\n          ) : (\r\n            <button className=\"mt-3 btn btn-info btn-block\" onClick={signUp}>\r\n              Sign Up\r\n            </button>\r\n          )}\r\n          {isLogin ? (\r\n            <div className=\"text-center pt-3 \">\r\n              Don't Have Accout?{\" \"}\r\n              <span\r\n                className=\"text-primary hoverMe\"\r\n                onClick={() => setIsLogin(false)}\r\n              >\r\n                Create One\r\n              </span>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center pt-3 \">\r\n              Already Have An Accoun?\r\n              <span\r\n                className=\"text-primary hoverMe\"\r\n                onClick={() => setIsLogin(true)}\r\n              >\r\n                Sign In\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\diaries-app\\src\\store\\index.ts",[],"E:\\diaries-app\\src\\reducer\\rootReducer.ts",[],"E:\\diaries-app\\src\\reducer\\authReducer\\index.ts",["128","129","130"],"import { createSlice, current, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AuthResponse } from \"../../services/mirage/routes/user\";\r\n\r\ninterface AuthState {\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n}\r\nconst initialState: AuthState = {\r\n  token: null,\r\n  isAuthenticated: false,\r\n};\r\nexport const AuthSlice = createSlice({\r\n  name: \"AuthSlice\",\r\n  initialState,\r\n  reducers: {\r\n    saveToken: (state, { payload }: { payload: AuthState }) => {\r\n      if (payload) {\r\n        state.token = payload.token;\r\n        state.isAuthenticated = payload.isAuthenticated;\r\n      }\r\n    },\r\n    removeUser(state) {\r\n      state.token = null;\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\nexport const { saveToken, removeUser } = AuthSlice.actions;\r\nexport default AuthSlice.reducer;\r\n","E:\\diaries-app\\src\\reducer\\userReducer\\index.ts",["131"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../Interfaces/user.interface\";\r\nexport const userSlice = createSlice({\r\n  name: \"userSlice\",\r\n  initialState: null,\r\n  reducers: {\r\n    setUser: (state, action) => {\r\n      return (state = action.payload);\r\n    },\r\n    removerUserData: (state: any) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\nexport const { setUser, removerUserData } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n","E:\\diaries-app\\src\\config\\router.tsx",["132","133","134"],"import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport { Login } from \"../components/Auth/index\";\r\nimport Home from \"../components/Home/index\";\r\nimport { connectAdvanced, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport DiaryContent from \"../components/DiaryContent\";\r\nimport MyDiaries from \"../components/MyDiaries\";\r\n\r\nexport default function MainRouter() {\r\n  const data = useSelector((state: any) => {\r\n    return state.authReducer.isAuthenticated;\r\n  });\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  useEffect(() => {\r\n    setIsLogin(data);\r\n  }, [data]);\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\">\r\n        {isLogin ? <Redirect to=\"/home\" /> : <Login />}\r\n      </Route>\r\n      <Route path=\"/home\">\r\n        <Navbar />\r\n        {!isLogin ? <Redirect to=\"/\" /> : <Home />}\r\n      </Route>\r\n      {/* <Navbar />   */}\r\n      <Route path=\"/diary/:id/\">\r\n        <Navbar />\r\n        {/* {!isLogin ? <Redirect to=\"/\" /> : <DiaryContent />} */}\r\n        <DiaryContent />\r\n      </Route>\r\n      <Route path=\"/myDiaries/\">\r\n        {/* {!isLogin ? <Redirect to=\"/\" /> : <MyDiaries />} */}\r\n        <MyDiaries />\r\n      </Route>\r\n    </Router>\r\n  );\r\n}\r\n","E:\\diaries-app\\src\\components\\Home\\index.tsx",["135","136","137","138"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./home.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport http from \"../../services/api\";\r\nimport Dairies from \"../Dairies\";\r\nimport { postDiary } from \"../../reducer/dairyReducer\";\r\nimport { param } from \"jquery\";\r\nimport Navbar from \"../Navbar\";\r\nimport Swal from \"sweetalert2\";\r\nimport { User } from \"../../Interfaces/user.interface\";\r\nimport { stateType } from \"../../types/types\";\r\nexport interface AuthResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\nconst Home = () => {\r\n  const [modal, setModal] = useState(false);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [scope, setScope] = useState<any>(\"\");\r\n  const [user, setUser] = useState<AuthResponse | User | any>();\r\n  const authUser: any = useSelector<AuthResponse | User | any>((state) => {\r\n    return state.userReducer;\r\n  });\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    setUser(authUser);\r\n  }, [authUser]);\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n  const create = async () => {\r\n    if (title === \"\" || scope === \"\") {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        text: \"Please Fill All The Fields\",\r\n      });\r\n    }\r\n    let obj = {\r\n      title: title,\r\n      type: scope,\r\n      userId: user.user.id,\r\n      diaryId: Math.floor(Math.random() * 100),\r\n    };\r\n    await dispatch(postDiary(obj));\r\n    Swal.fire({\r\n      icon: 'success',\r\n      title: 'Diary Created.',\r\n    })\r\n    toggle();\r\n  };\r\n\r\n  return (\r\n    <div className=\"homeWrapper\">\r\n      <Dairies />\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Add Dairy</ModalHeader>\r\n        <ModalBody>\r\n          <label className=\"font-weight-bold\">Dairy Name</label>\r\n          <br />\r\n          <input\r\n            className=\"input\"\r\n            placeholder=\"Enter Dairy Name\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <br />\r\n          <div className=\"mt-3\">\r\n            <input\r\n              type=\"radio\"\r\n              id=\"public\"\r\n              name=\"scope\"\r\n              value=\"Public\"\r\n              className=\"radio\"\r\n              onChange={(e) => setScope(e.target.value)}\r\n            />\r\n            <label style={{ fontSize: \"18px\" }}>Public</label>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"private\"\r\n              name=\"scope\"\r\n              value=\"private\"\r\n              className=\"radio\"\r\n              onChange={(e) => setScope(e.target.value)}\r\n            />\r\n            <label style={{ fontSize: \"18px\" }}>Private</label>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={create}>\r\n            Create\r\n          </Button>{\" \"}\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      <button className=\"float\" onClick={toggle}>\r\n        ADD\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","E:\\diaries-app\\src\\components\\Navbar\\index.tsx",["139","140","141","142","143"],"import React from \"react\";\r\nimport \"./navbar.css\";\r\nimport { removeUser } from \"../../reducer/authReducer/index\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { removeDiaries } from \"../../reducer/dairyReducer\";\r\nimport { removerUserData } from \"../../reducer/userReducer\";\r\nimport { removeEntries } from \"../../reducer/entryReducer\";\r\nconst Navbar = () => {\r\n  const history=useHistory()\r\n  const dispatch = useDispatch();\r\n  const data = useSelector((state) => {\r\n    return state;\r\n  });\r\n  const logout = () => {\r\n    dispatch(removeUser());\r\n    dispatch(removerUserData());\r\n    dispatch(removeEntries());\r\n    history.push(\"/\")\r\n  };\r\n  return (\r\n    <div style={{ width: \"100vw\" }}>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light \">\r\n        <a className=\"navbar-brand font-weight-bold text-white\" href=\"#\">\r\n          DiaryApp\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav ml-auto\">\r\n            <li className=\"nav-item active\">\r\n              <Link to=\"/home\">\r\n                Home <span className=\"sr-only\">(current)</span>\r\n              </Link>\r\n            </li>\r\n\r\n            <Link to=\"/myDiaries/\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\">My Diaries</a>\r\n              </li>\r\n            </Link>\r\n\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" onClick={logout}>\r\n                Logout\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","E:\\diaries-app\\src\\services\\mirage\\routes\\dairy.ts",["144"],"import dayjs from \"dayjs\";\r\nimport { Request, Response } from \"miragejs\";\r\nimport { useSelector } from \"react-redux\";\r\n// import Diary from \"../../../components/Diary\";\r\nimport { Diary } from \"../../../Interfaces/diary.interface\";\r\nimport { User } from \"../../../Interfaces/user.interface\";\r\nimport { handleError } from \"../server\";\r\n\r\nexport const create = (\r\n  schema: any,\r\n  req: Request\r\n): { user: User; diary: Diary } | Response => {\r\n  try {\r\n    const { title, type, userId } = JSON.parse(\r\n      req.requestBody\r\n    ) as Partial<Diary>;\r\n    const exUser = schema.users.findBy({ id: userId });\r\n    if (!exUser) {\r\n      return handleError(null, \"No such user exists.\");\r\n    }\r\n    const now = dayjs().format();\r\n    const diary = exUser.createDiary({\r\n      title,\r\n      type,\r\n      createdAt: now,\r\n      updatedAt: now,\r\n      userId,\r\n    });\r\n    return {\r\n      user: {\r\n        ...exUser.attrs,\r\n      },\r\n      diary: diary.attrs,\r\n    };\r\n  } catch (error) {\r\n    return handleError(error, \"Failed to create Diary.\");\r\n  }\r\n};\r\n\r\nexport const getDiaries = (schema: any, req: Request): Diary[] | Response => {\r\n  try {\r\n    const user = schema.users.find(req.params.id);\r\n    return user.diary as Diary[];\r\n  } catch (error) {\r\n    return handleError(error, \"Could not get user diaries.\");\r\n  }\r\n};\r\nexport const updateDiary = (schema: any, req: Request): Diary[] | Response => {\r\n  try {\r\n    const diary = schema.diaries.find(req.params.id);\r\n    const data = JSON.parse(req.requestBody);\r\n    diary.update({\r\n      ...data,\r\n    });\r\n    return diary.attrs;\r\n  } catch (err) {\r\n    return handleError(err);\r\n  }\r\n};\r\n","E:\\diaries-app\\src\\reducer\\dairyReducer\\index.ts",["145","146"],"import {\r\n  createAsyncThunk,\r\n  createSlice,\r\n  current,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport http from \"../../services/api\";\r\nimport { DiaryType, stateType } from \"../../types/types\";\r\n\r\n//Interfaces\r\ninterface FulfilledAction<ThunkArg, PromiseResult> {\r\n  type: string;\r\n  payload: PromiseResult;\r\n  meta: {\r\n    requestId: string;\r\n    arg: ThunkArg;\r\n  };\r\n}\r\n\r\ntype Fulfilled = <ThunkArg, PromiseResult>(\r\n  payload: PromiseResult,\r\n  requestId: string,\r\n  arg: ThunkArg\r\n) => FulfilledAction<ThunkArg, PromiseResult>;\r\n\r\nexport const postDiary: any = createAsyncThunk(\r\n  \"/diaries/:id\",\r\n  async (obj: DiaryType) => {\r\n    const response = await http.post(`/diaries/`, obj);\r\n    return await response;\r\n  }\r\n);\r\nexport const updateDiaryContent: any = createAsyncThunk(\r\n  \"/s\",\r\n  async (obj: DiaryType) => {\r\n    const response = await http.put(`/diaries/${obj.id}`, obj);\r\n    return response;\r\n  }\r\n);\r\nexport const DairySlice = createSlice({\r\n  initialState: {\r\n    diaries: [],\r\n  },\r\n  name: \"DairySlice\",\r\n  reducers: {\r\n    addDairyData: (state, { payload }: PayloadAction) => {\r\n      const data: any = payload;\r\n      state.diaries = data;\r\n    },\r\n    removeDiaries: (state): stateType | any => {\r\n      state.diaries = [];\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [postDiary.fulfilled]: (state: any, { payload }: PayloadAction | any) => {\r\n      const data: any = payload.diary;\r\n      const newObj = Object.assign({}, data);\r\n      state.diaries = [...state.diaries, newObj];\r\n      // }\r\n    },\r\n    [postDiary.pending]: (state: any, { payload }: PayloadAction) => {\r\n      return console.log(\"Pending \");\r\n    },\r\n    [postDiary.reject]: (state: any, { payload }: PayloadAction) => {\r\n      return console.log(\"Error Found \");\r\n    },\r\n    [updateDiaryContent.fulfilled]: (\r\n      state: any,\r\n      { payload }: PayloadAction\r\n    ) => {\r\n      const data: any = payload;\r\n      const { id } = data;\r\n      const newObj = Object.assign({}, data);\r\n      const diaryIndex = current(state.diaries).findIndex(\r\n        (diary: any) => diary.id === id\r\n      );\r\n\r\n      // const diaryIndex = current(state.diaries).find((diary: any) => id === id);\r\n      if (diaryIndex !== -1) {\r\n        state.diaries.splice(diaryIndex, 1, data);\r\n      }\r\n      // state.splice(diaryIndex, 1, data);\r\n\r\n      // state.diaries = [...state.diaries, newObj];\r\n      // }\r\n    },\r\n    [updateDiaryContent.pending]: (state: any, { payload }: PayloadAction) => {\r\n      return console.log(\"Pending \");\r\n    },\r\n    [updateDiaryContent.reject]: (state: any, action: any) => {\r\n      return console.log(\"Error Found \");\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDairyData, removeDiaries } = DairySlice.actions;\r\nexport default DairySlice.reducer;\r\n","E:\\diaries-app\\src\\components\\Dairies\\index.tsx",["147"],"import Diary from \"../Diary\";\r\nimport \"./diary.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\ninterface state {\r\n  authReducer: {};\r\n  dairyReducer: {\r\n    diaries: [];\r\n  };\r\n  entryReducer: {\r\n    entries: {};\r\n  };\r\n  userReducer: {};\r\n}\r\ninterface diary {\r\n  createdAt: string;\r\n  entryIds: null;\r\n  id: string;\r\n  title: string;\r\n  type: string;\r\n  updatedAt: string;\r\n  userId: string;\r\n}\r\nconst Dairies = () => {\r\n  const [diaries, setDiaries]: any = useState<diary[]>([]);\r\n  const data = useSelector((state: state) => {\r\n    return state.dairyReducer.diaries;\r\n  });\r\n  useEffect(() => {\r\n    setDiaries(data);\r\n  }, [data]);\r\n  if (diaries.length === 0) {\r\n    return (\r\n      <div className=\"diaryContentWrapper \">\r\n        <h1 className=\"text-warning text-center\">No Diaries Added</h1>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"diariesWrapper text-center\" style={{ margin: \"0 auto\" }}>\r\n      <div className=\"container-fluid text-center\" style={{ margin: \"0 auto\" }}>\r\n        <div className=\"row  no-gutters    pt-3\">\r\n          {diaries &&\r\n            diaries.map((item: diary, index: string) => {\r\n              if (item.type === \"Public\") {\r\n                return (\r\n                  <div className=\"col-md-3 p-0 m-1 diaryBox\" key={index}>\r\n                    <Diary data={item} editable={false} />\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dairies;\r\n","E:\\diaries-app\\src\\components\\Diary\\index.tsx",["148","149","150","151"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport http from \"../../services/api\";\r\nimport \"./diary.css\";\r\nimport { addEntryReducer } from \"../../reducer/entryReducer\";\r\nimport { FaLock } from \"react-icons/fa\";\r\nimport { MdPublic } from \"react-icons/md\";\r\n\r\ninterface diary {\r\n  createdAt: string;\r\n  entryIds: null;\r\n  id: string;\r\n  title: string;\r\n  type: string;\r\n  updatedAt: string;\r\n  userId: string;\r\n}\r\nconst Diary = ({ data, editable }: { data: diary; editable: boolean }) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div\r\n      className=\"DiaryCard\"\r\n      onClick={() => history.push(`/diary/${data.id}/`)}\r\n    >\r\n      <h2 className=\"text-white px-2 py-2 text-left\">{data.title}</h2>\r\n      <p className=\"text-info\">\r\n        Created At: <span className=\"text-white\">{data.createdAt}</span>{\" \"}\r\n      </p>\r\n      <p className=\"text-warning\">\r\n        Updated At: <span className=\"text-white\">{data.updatedAt}</span>{\" \"}\r\n      </p>\r\n      {data.type === \"Public\" ? (\r\n        <MdPublic size={20} style={{ color: \"white\", textAlign: \"right\" }} />\r\n      ) : (\r\n        <FaLock size={20} style={{ color: \"white\", textAlign: \"right\" }} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Diary;\r\n","E:\\diaries-app\\src\\services\\mirage\\routes\\entry.ts",[],"E:\\diaries-app\\src\\components\\Loader\\index.tsx",[],"E:\\diaries-app\\src\\components\\DiaryContent\\index.tsx",["152","153","154","155","156","157","158","159","160","161"],"import \"./diaryContent.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  addAllEntries,\r\n  addEntryReducer,\r\n  upadteEntryReducer,\r\n} from \"../../reducer/entryReducer\";\r\nimport { FaPencilAlt } from \"react-icons/fa\";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemHeading,\r\n  AccordionItemButton,\r\n  AccordionItemPanel,\r\n} from \"react-accessible-accordion\";\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport \"react-accessible-accordion/dist/fancy-example.css\";\r\nimport Modal from \"reactstrap/lib/Modal\";\r\nimport ModalHeader from \"reactstrap/lib/ModalHeader\";\r\nimport ModalBody from \"reactstrap/lib/ModalBody\";\r\nimport { Button, Form, FormGroup, Input, Label, ModalFooter } from \"reactstrap\";\r\nimport { updateDiaryContent } from \"../../reducer/dairyReducer\";\r\nimport dayjs from \"dayjs\";\r\nimport http from \"../../services/api\";\r\nimport Swal from \"sweetalert2\";\r\nimport { DiaryType, EntryType, stateType } from \"../../types/types\";\r\nimport { Diary } from \"../../Interfaces/diary.interface\";\r\nimport { User } from \"../../Interfaces/user.interface\";\r\nimport { Entry } from \"../../Interfaces/entry.interface\";\r\nimport Loader from \"../Loader\";\r\nconst DiaryContent = () => {\r\n  const dispatch = useDispatch();\r\n  const [isEditable, setIsEditable] = useState<boolean>();\r\n  const [diary, setDiary] = useState<any>();\r\n  const [entry, setEntry] = useState<any>([]);\r\n  // Editabel States\r\n  const [modal, setModal] = useState(false);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [entryName, setEntryName] = useState(\"\");\r\n  const [scope, setScope] = useState<string>(\"\");\r\n  const [entryModal, setEntryModal] = useState<boolean>(false);\r\n  const [entryContent, setEntryContent] = useState<string>(\"\");\r\n  const [currentId, setCurrentId] = useState<string>(\"\");\r\n  const [state, setState] = useState<boolean>(true);\r\n  const allDiaries = useSelector((state: any) => {\r\n    return state.dairyReducer.diaries;\r\n  });\r\n  const user = useSelector((state: any) => {\r\n    return state.userReducer.user;\r\n  });\r\n  const entries = useSelector((state: any) => {\r\n    return state.entryReducer.entries;\r\n  });\r\n  const { id }: { id: string } = useParams();\r\n\r\n  const getEntry = (id: string) => {\r\n    const path = `/diaries/entry/${id}`;\r\n    http.get(path).then((e: EntryType | any) => {\r\n      let modifiedEntry = e.entries.map((x: Entry) => {\r\n        x[\"diaryId\"] = id;\r\n        return x;\r\n      });\r\n      dispatch(addAllEntries(e.entries));\r\n\r\n      // setEntry(entries);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getEntry(id);\r\n  }, []);\r\n  useEffect(() => {\r\n    let targetDiary = allDiaries.filter((x: any) => x.id === id);\r\n\r\n    if (targetDiary[0] && targetDiary[0].userId === user.id) {\r\n      setIsEditable(true);\r\n    }\r\n\r\n    setDiary(targetDiary[0]);\r\n    setTitle(targetDiary[0].title);\r\n    setScope(targetDiary[0].type);\r\n\r\n    const myEntries = entries.filter((x: EntryType) => x.diaryId === id);\r\n    setEntry(myEntries);\r\n  }, [allDiaries, entries]);\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n  const toggleEntryModal = (id: null) => {\r\n    if (id == null) {\r\n      entryModal ? setEntryModal(false) : setEntryModal(true);\r\n    } else if (state === false) {\r\n      let entryFilterd = entry.filter((x: Entry) => x.id === id);\r\n      setEntryName(entryFilterd[0].title);\r\n      setEntryContent(entryFilterd[0].content);\r\n    }\r\n    {\r\n      entryModal ? setEntryModal(false) : setEntryModal(true);\r\n    }\r\n  };\r\n  const updateDiary = () => {\r\n    if (title === \"\" || scope === \"\") {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        text: \"Please Fill All The Fields\",\r\n      });\r\n    }\r\n    const now = dayjs().format();\r\n    let obj = {\r\n      title,\r\n      type: scope,\r\n      createdAt: diary.createdAt,\r\n      updatedAt: now,\r\n      id: diary.id,\r\n    };\r\n    toggle();\r\n    dispatch(updateDiaryContent(obj));\r\n    Swal.fire({\r\n      icon: \"success\",\r\n      title: \"Diary Added.\",\r\n    });\r\n  };\r\n  const updateEntry = () => {\r\n    if (title === \"\" || entryContent === \"\") {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        text: \"Please Fill All The Fields\",\r\n      });\r\n    }\r\n    let obj = {\r\n      title: entryName,\r\n      content: entryContent,\r\n      id: currentId,\r\n    };\r\n    dispatch(upadteEntryReducer(obj));\r\n    setEntryContent(\"\");\r\n    setEntryName(\"\");\r\n    setEntryModal(false);\r\n    Swal.fire({\r\n      icon: \"success\",\r\n      title: \"Entry Updated.\",\r\n    });\r\n  };\r\n  const createEntry = async () => {\r\n    if (title === \"\" || entryContent === \"\") {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        text: \"Please Fill All The Fields\",\r\n      });\r\n    }\r\n    let obj = {\r\n      title: entryName,\r\n      content: entryContent,\r\n      id: id,\r\n    };\r\n    await dispatch(addEntryReducer(obj));\r\n    Swal.fire({\r\n      icon: \"success\",\r\n      title: \"Entry Added.\",\r\n    });\r\n    setEntryModal(false);\r\n  };\r\n  const openEditor = (id: any) => {\r\n    if (id === null) {\r\n      setEntryModal(true);\r\n      setState(true);\r\n      setEntryName(\"\");\r\n      setEntryContent(\"\");\r\n    } else {\r\n      setCurrentId(id);\r\n      setState(false);\r\n      toggleEntryModal(id);\r\n    }\r\n  };\r\n  if (!entry) {\r\n    return <Loader />;\r\n  }\r\n  return (\r\n    <div className=\"diaryContentWrapper\">\r\n\r\n      {diary && diary ? (\r\n        <div className=\"nameWrapper d-flex\">\r\n          {isEditable ? (\r\n            <div className=\"simple\">\r\n              <div\r\n                className=\"text-white p-5 d-flex\"\r\n                style={{ justifyContent: \"space-around\" }}\r\n                onClick={toggle}\r\n              >\r\n                <h1 className=\"myDIV\">{diary.title}'s Entries</h1>{\" \"}\r\n                <span className=\"hide p-1\">\r\n                  <FaPencilAlt style={{ color: \"white\" }} size={20} />\r\n                </span>\r\n              </div>\r\n              <div className=\" p-5\">\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  onClick={() => openEditor(null)}\r\n                >\r\n                  Add Entry\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-white p-5 d-flex\">\r\n              <h1 className=\"\">{diary.title}'s Entries</h1>{\" \"}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Update Dairy</ModalHeader>\r\n        <ModalBody>\r\n          <label className=\"font-weight-bold\">Dairy Name</label>\r\n          <br />\r\n          <input\r\n            className=\"input\"\r\n            placeholder=\"Enter Dairy Name\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <br />\r\n          <div className=\"mt-3\">\r\n            <input\r\n              type=\"radio\"\r\n              id=\"public\"\r\n              name=\"scope\"\r\n              value=\"Public\"\r\n              className=\"radio\"\r\n              onChange={(e) => setScope(e.target.value)}\r\n            />\r\n            <label style={{ fontSize: \"18px\" }}>Public</label>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"private\"\r\n              name=\"scope\"\r\n              value=\"private\"\r\n              className=\"radio\"\r\n              onChange={(e) => setScope(e.target.value)}\r\n            />\r\n            <label style={{ fontSize: \"18px\" }}>Private</label>\r\n          </div>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={updateDiary}>\r\n            Update\r\n          </Button>\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      {/* Entry Modal */}\r\n      <Modal isOpen={entryModal} toggle={() => toggleEntryModal(null)}>\r\n        <ModalHeader toggle={() => toggleEntryModal(null)}>\r\n          Create Entry\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <label className=\"font-weight-bold\">Entry Name</label>\r\n          <br />\r\n          <input\r\n            className=\"input\"\r\n            placeholder=\"Enter Dairy Name\"\r\n            value={entryName}\r\n            onChange={(e) => setEntryName(e.target.value)}\r\n          />\r\n          <br />\r\n          <FormGroup className=\"p-5\">\r\n            <Label for=\"exampleText\" className=\"font-weight-bold\">\r\n              Entry Content\r\n            </Label>\r\n            <Input\r\n              onChange={(e) => setEntryContent(e.target.value)}\r\n              type=\"textarea\"\r\n              value={entryContent}\r\n              placeholder=\"Enter Your Thoughts\"\r\n              name=\"text\"\r\n              id=\"exampleText\"\r\n              rows=\"10\"\r\n              cols=\"50\"\r\n              style={{ overflow: \"auto\" }}\r\n            />\r\n          </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {state ? (\r\n            <Button color=\"success\" onClick={createEntry}>\r\n              Add Entry\r\n            </Button>\r\n          ) : (\r\n            <Button color=\"primary\" onClick={updateEntry}>\r\n              Update\r\n            </Button>\r\n          )}\r\n          <Button color=\"secondary\" onClick={() => toggleEntryModal(null)}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      <div className=\"container pb-5\">\r\n        <div id=\"accordion\">\r\n          <Accordion allowZeroExpanded>\r\n            {entry.map((item: any) => {\r\n              var date = new Date(item.updatedAt);\r\n              var seconds = date.getTime() / 1000; //1440516958\r\n              return (\r\n                <AccordionItem key={item.id}>\r\n                  <AccordionItemHeading>\r\n                    <AccordionItemButton>\r\n                      <span\r\n                        style={{\r\n                          justifyContent: \"space-between\",\r\n                        }}\r\n                      >\r\n                        {item.title}{\" \"}\r\n                        {isEditable ? (\r\n                          <FaPencilAlt\r\n                            onClick={() => openEditor(item.id)}\r\n                            className=\"titleIcon\"\r\n                            style={{ color: \"black\", float: \"right\" }}\r\n                            size={20}\r\n                          />\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </span>\r\n                    </AccordionItemButton>\r\n                  </AccordionItemHeading>\r\n                  <AccordionItemPanel\r\n                    style={{ backgroundColor: \"#272B2F\", color: \"white\" }}\r\n                  >\r\n                    {item.content}\r\n                    <div\r\n                      style={{\r\n                        marginBottom: \"0 auto\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                    >\r\n                      <div className=\"text-success  \">\r\n                        Created At {item.createdAt}\r\n                      </div>\r\n                      <div className=\"text-info\">\r\n                        Udpate At {item.createdAt}\r\n                      </div>\r\n                    </div>\r\n                  </AccordionItemPanel>\r\n                </AccordionItem>\r\n              );\r\n            })}\r\n          </Accordion>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiaryContent;\r\n","E:\\diaries-app\\src\\components\\MyDiaries\\index.tsx",["162","163","164"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { DiaryType, stateType } from \"../../types/types\";\r\nimport Diary from \"../Diary\";\r\nimport Navbar from \"../Navbar\";\r\nimport { FaLock } from \"react-icons/fa\";\r\n\r\ninterface diary {\r\n  createdAt: string;\r\n  entryIds: null;\r\n  id: string;\r\n  title: string;\r\n  type: string;\r\n  updatedAt: string;\r\n  userId: string;\r\n}\r\nconst MyDiaries = () => {\r\n  const [diaries, setDiaries] = useState<any>([]);\r\n  const data = useSelector((state: stateType) => {\r\n    return state.dairyReducer.diaries;\r\n  });\r\n  const user = useSelector((state: stateType | any) => {\r\n    return state.userReducer.user;\r\n  });\r\n  useEffect(() => {\r\n    const mine = data.filter((x: DiaryType) => x.userId === user.id);\r\n    setDiaries(mine);\r\n  }, [data]);\r\n  if (diaries.every((x: DiaryType) => x.type !== \"private\")) {\r\n    return (\r\n      <div className=\"diaryContentWrapper \">\r\n        <Navbar />\r\n        <h1 className=\"text-warning text-center\">No Private Diaries Added</h1>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"diaryContentWrapper \">\r\n      <Navbar />\r\n\r\n      <div className=\"row  no-gutters justify-content-center pt-3\">\r\n        {diaries &&\r\n          diaries.map((item: diary, index: string) => {\r\n            if (item.type === \"private\") {\r\n              return (\r\n                <div className=\"col-md-3 p-0 m-1 DiaryBox\" key={index}>\r\n                  <Diary data={item} editable={false} />\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyDiaries;\r\n","E:\\diaries-app\\src\\reducer\\entryReducer\\index.ts",["165","166","167"],"import {\r\n  createAsyncThunk,\r\n  createSlice,\r\n  current,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport http from \"../../services/api\";\r\nimport { EntryType } from \"../../types/types\";\r\ninterface FulfilledAction<ThunkArg, PromiseResult> {\r\n  type: string;\r\n  payload: PromiseResult;\r\n  meta: {\r\n    requestId: string;\r\n    arg: ThunkArg;\r\n  };\r\n}\r\nexport const addEntryReducer: any = createAsyncThunk(\r\n  \"RandomEntry\",\r\n  async (obj: EntryType) => {\r\n    const response = await http.post(`/diaries/entry/${obj.id}/`, obj);\r\n    return await response;\r\n  }\r\n);\r\nexport const upadteEntryReducer: any = createAsyncThunk(\r\n  \"EditEntry\",\r\n  async (obj: EntryType) => {\r\n    const response = await http.put(`/diaries/entry/${obj.id}/`, obj);\r\n    return await response;\r\n  }\r\n);\r\nexport const entrySlice = createSlice({\r\n  name: \"Entry Slice\",\r\n  initialState: {\r\n    entries: [],\r\n  },\r\n  reducers: {\r\n    removeEntries: (state: any) => {\r\n      state.entries = [];\r\n    },\r\n    addAllEntries: (state: any, { payload }: PayloadAction | any) => {\r\n      let data = payload.map((x: any) => {\r\n        if (!state.entries.includes(x.id)) {\r\n          return x;\r\n        }\r\n      });\r\n      state.entries = data;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [addEntryReducer.fulfilled]: (state: any, action: any) => {\r\n      const data: any = action.payload;\r\n      const newObj = Object.assign({}, data);\r\n      state.entries = [...state.entries, newObj.entry];\r\n      // }\r\n    },\r\n    [addEntryReducer.pending]: (state: any, { payload }: PayloadAction) => {\r\n      return console.log(\"Pending \");\r\n    },\r\n    [addEntryReducer.reject]: (state: any, { payload }: PayloadAction) => {\r\n      return console.log(\"Error Found \");\r\n    },\r\n    [upadteEntryReducer.fulfilled]: (\r\n      state: any,\r\n      { payload }: PayloadAction\r\n    ) => {\r\n      const data: any = payload;\r\n      const { id } = data;\r\n      const index = state.entries.findIndex((e: any) => e.id === id);\r\n      if (index !== -1) {\r\n        state.entries.splice(index, 1, data);\r\n      }\r\n      // }\r\n    },\r\n    [upadteEntryReducer.pending]: (state: any, action: any) => {\r\n      return console.log(\"Pending \");\r\n    },\r\n    [upadteEntryReducer.reject]: (state: any, action: any) => {\r\n      return console.log(\"Error Found \");\r\n    },\r\n  },\r\n});\r\nexport const { removeEntries, addAllEntries } = entrySlice.actions;\r\nexport default entrySlice.reducer;\r\n","E:\\diaries-app\\src\\Interfaces\\diary.interface.ts",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":12},{"ruleId":"172","severity":1,"message":"176","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":9},{"ruleId":"172","severity":1,"message":"177","line":13,"column":30,"nodeType":"174","messageId":"175","endLine":13,"endColumn":35},{"ruleId":"178","severity":1,"message":"179","line":43,"column":1,"nodeType":"180","endLine":46,"endColumn":3},{"ruleId":"172","severity":1,"message":"181","line":1,"column":20,"nodeType":"174","messageId":"175","endLine":1,"endColumn":29},{"ruleId":"172","severity":1,"message":"173","line":3,"column":8,"nodeType":"174","messageId":"175","endLine":3,"endColumn":12},{"ruleId":"172","severity":1,"message":"182","line":4,"column":23,"nodeType":"174","messageId":"175","endLine":4,"endColumn":34},{"ruleId":"172","severity":1,"message":"183","line":21,"column":7,"nodeType":"174","messageId":"175","endLine":21,"endColumn":14},{"ruleId":"172","severity":1,"message":"184","line":1,"column":23,"nodeType":"174","messageId":"175","endLine":1,"endColumn":30},{"ruleId":"172","severity":1,"message":"185","line":1,"column":32,"nodeType":"174","messageId":"175","endLine":1,"endColumn":45},{"ruleId":"172","severity":1,"message":"186","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":22},{"ruleId":"172","severity":1,"message":"187","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":14},{"ruleId":"172","severity":1,"message":"188","line":3,"column":3,"nodeType":"174","messageId":"175","endLine":3,"endColumn":9},{"ruleId":"172","severity":1,"message":"189","line":5,"column":3,"nodeType":"174","messageId":"175","endLine":5,"endColumn":7},{"ruleId":"172","severity":1,"message":"190","line":11,"column":10,"nodeType":"174","messageId":"175","endLine":11,"endColumn":25},{"ruleId":"172","severity":1,"message":"191","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":12},{"ruleId":"172","severity":1,"message":"192","line":8,"column":10,"nodeType":"174","messageId":"175","endLine":8,"endColumn":15},{"ruleId":"172","severity":1,"message":"193","line":9,"column":8,"nodeType":"174","messageId":"175","endLine":9,"endColumn":14},{"ruleId":"172","severity":1,"message":"194","line":12,"column":10,"nodeType":"174","messageId":"175","endLine":12,"endColumn":19},{"ruleId":"172","severity":1,"message":"195","line":6,"column":10,"nodeType":"174","messageId":"175","endLine":6,"endColumn":23},{"ruleId":"172","severity":1,"message":"196","line":12,"column":9,"nodeType":"174","messageId":"175","endLine":12,"endColumn":13},{"ruleId":"197","severity":1,"message":"198","line":24,"column":9,"nodeType":"199","endLine":24,"endColumn":74},{"ruleId":"197","severity":1,"message":"200","line":48,"column":17,"nodeType":"199","endLine":48,"endColumn":41},{"ruleId":"197","severity":1,"message":"200","line":53,"column":15,"nodeType":"199","endLine":53,"endColumn":56},{"ruleId":"172","severity":1,"message":"182","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":21},{"ruleId":"172","severity":1,"message":"201","line":20,"column":6,"nodeType":"174","messageId":"175","endLine":20,"endColumn":15},{"ruleId":"172","severity":1,"message":"202","line":73,"column":13,"nodeType":"174","messageId":"175","endLine":73,"endColumn":19},{"ruleId":"203","severity":1,"message":"204","line":44,"column":54,"nodeType":"205","messageId":"206","endLine":44,"endColumn":56},{"ruleId":"172","severity":1,"message":"189","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":14},{"ruleId":"172","severity":1,"message":"207","line":4,"column":10,"nodeType":"174","messageId":"175","endLine":4,"endColumn":21},{"ruleId":"172","severity":1,"message":"191","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":12},{"ruleId":"172","severity":1,"message":"208","line":7,"column":10,"nodeType":"174","messageId":"175","endLine":7,"endColumn":25},{"ruleId":"172","severity":1,"message":"209","line":25,"column":18,"nodeType":"174","messageId":"175","endLine":25,"endColumn":22},{"ruleId":"172","severity":1,"message":"210","line":30,"column":10,"nodeType":"174","messageId":"175","endLine":30,"endColumn":19},{"ruleId":"172","severity":1,"message":"194","line":30,"column":32,"nodeType":"174","messageId":"175","endLine":30,"endColumn":41},{"ruleId":"172","severity":1,"message":"211","line":31,"column":10,"nodeType":"174","messageId":"175","endLine":31,"endColumn":15},{"ruleId":"172","severity":1,"message":"187","line":32,"column":10,"nodeType":"174","messageId":"175","endLine":32,"endColumn":14},{"ruleId":"172","severity":1,"message":"212","line":63,"column":11,"nodeType":"174","messageId":"175","endLine":63,"endColumn":24},{"ruleId":"213","severity":1,"message":"214","line":74,"column":6,"nodeType":"215","endLine":74,"endColumn":8,"suggestions":"216"},{"ruleId":"213","severity":1,"message":"217","line":88,"column":6,"nodeType":"215","endLine":88,"endColumn":27,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":101,"column":5,"nodeType":"221","messageId":"222","endLine":103,"endColumn":6},{"ruleId":"172","severity":1,"message":"223","line":313,"column":19,"nodeType":"174","messageId":"175","endLine":313,"endColumn":26},{"ruleId":"172","severity":1,"message":"224","line":6,"column":10,"nodeType":"174","messageId":"175","endLine":6,"endColumn":16},{"ruleId":"213","severity":1,"message":"225","line":28,"column":6,"nodeType":"215","endLine":28,"endColumn":12,"suggestions":"226"},{"ruleId":"203","severity":1,"message":"204","line":43,"column":52,"nodeType":"205","messageId":"206","endLine":43,"endColumn":54},{"ruleId":"172","severity":1,"message":"184","line":4,"column":3,"nodeType":"174","messageId":"175","endLine":4,"endColumn":10},{"ruleId":"172","severity":1,"message":"227","line":9,"column":11,"nodeType":"174","messageId":"175","endLine":9,"endColumn":26},{"ruleId":"203","severity":1,"message":"204","line":41,"column":39,"nodeType":"205","messageId":"206","endLine":41,"endColumn":41},"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'$' is defined but never used.","'email' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'history' is assigned a value but never used.","'current' is defined but never used.","'PayloadAction' is defined but never used.","'AuthResponse' is defined but never used.","'User' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'connectAdvanced' is defined but never used.","'http' is defined but never used.","'param' is defined but never used.","'Navbar' is defined but never used.","'stateType' is defined but never used.","'removeDiaries' is defined but never used.","'data' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Fulfilled' is defined but never used.","'newObj' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useDispatch' is defined but never used.","'addEntryReducer' is defined but never used.","'Form' is defined but never used.","'DiaryType' is defined but never used.","'Diary' is defined but never used.","'modifiedEntry' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getEntry' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["230"],"React Hook useEffect has missing dependencies: 'id' and 'user.id'. Either include them or remove the dependency array.",["231"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'seconds' is assigned a value but never used.","'FaLock' is defined but never used.","React Hook useEffect has a missing dependency: 'user.id'. Either include it or remove the dependency array.",["232"],"'FulfilledAction' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [getEntry, id]",{"range":"239","text":"240"},"Update the dependencies array to be: [allDiaries, entries, id, user.id]",{"range":"241","text":"242"},"Update the dependencies array to be: [data, user.id]",{"range":"243","text":"244"},[2699,2701],"[getEntry, id]",[3108,3129],"[allDiaries, entries, id, user.id]",[817,823],"[data, user.id]"]